*comment IS_NUMBER
*comment ------------------------------
*comment Determines if a given string is a number.
*comment ------------------------------
*comment 	params:
*comment		p_string(string): the value to test
*comment	returns: 
*comment		(boolean) true if p_string is a number, else false
*label is_number
*params p_string
*temp input_len length(p_string)
*temp n 1
*temp result true
*label _is_number_loop
*if (n <= input_len)
	*gosub_scene cslib_number _char_is_number (p_string#n)
	*if not(cslib_ret)
		*set result false
		*goto _is_number_end
	*set n + 1
	*goto _is_number_loop
*label _is_number_end
*set cslib_ret result
*return


*comment ARE_NUMBERS
*comment ------------------------------
*comment Determines if any number of given parameters are ALL numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(any): a value to test
*comment	returns: 
*comment		(boolean): true if ALL values passed were numbers, else false
*label are_numbers
*params
*temp n 1
*temp result true
*label _are_numbers_loop
*if (n <= param_count)
	*gosub_scene cslib_number is_number param[n]
	*if not(cslib_ret)
		*set result false
		*goto _are_numbers_end
	*set n + 1
	*goto _are_numbers_loop
*label _are_numbers_end
*set cslib_ret result
*return


*comment MEAN
*comment ------------------------------
*comment Returns the mean (average) of the given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number to include in the calculation
*comment	returns: 
*comment		(number): the mean of the given numbers
*label mean
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp sum 0
*temp n 1
*label _mean_loop
*if (n <= param_count)
	*set sum + param[n]
	*set n + 1
	*goto _mean_loop
*set cslib_ret (sum / param_count)
*return


*comment MAX
*comment ------------------------------
*comment Returns the largest of a set of given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number
*comment	returns: 
*comment		(number): the largest number
*label max
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label _max_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if (param[n] > current)
	*set current param[n]
*set n + 1
*goto _max_loop


*comment MIN
*comment ------------------------------
*comment Returns the smallest of a set of given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number
*comment	returns: 
*comment		(number): the smallest number
*label min
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label _min_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if (param[n] < current)
	*set current param[n]
*set n + 1
*goto _min_loop


*comment MAX_STAT
*comment ------------------------------
*comment Returns the variable name of the largest of a set of given stats.
*comment ------------------------------
*comment 	params:
*comment		param_n(string): the name of a stat variable
*comment	returns: 
*comment		(string): the variable name of the stat with the largest value
*label max_stat
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label max_stat_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if ({param[n]} > {current})
	*set current param[n]
*set n + 1
*goto max_stat_loop


*comment MIN_STAT
*comment ------------------------------
*comment Returns the variable name of the smallest of a set of given stats.
*comment ------------------------------
*comment 	params:
*comment		param_n(string): the name of a stat variable
*comment	returns: 
*comment		(string): the variable name of the stat with the smallest value
*label min_stat
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label min_stat_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if ({param[n]} < {current})
	*set current param[n]
*set n + 1
*goto min_stat_loop


*label _char_is_number
*params p_char
*if (length(p_char) != 1)
	*bug TODO
*temp nums "0123456789"
*temp n 1
*temp result false
*label _char_is_number_loop
*if (n <= 10)
	*if p_char = (nums#n)
		*set result true
		*goto _char_is_number_end
	*set n + 1
	*goto _char_is_number_loop
*label _char_is_number_end
*set cslib_ret result
*return





*label sin
*params x
*temp coeff_0 0
*temp coeff_1(1/1)
*temp coeff_2 0
*temp coeff_3(0-(1/6))
*temp coeff_4 0
*temp coeff_5(1/120)
*temp coeff_6 0
*temp coeff_7(0-(1/5040))
*temp coeff_8 0
*temp coeff_9(1/362880)
*temp coeff_10 0
*temp coeff_11(0-(1/39916800))
*temp coeff_12 0
*temp coeff_13(1/6227020800)
*temp coeff_14 0
*temp coeff_15(0-(1/1307674368000))
*temp coeff_16 0
*temp coeff_17(1/355687428096000)
*temp coeff_18 0
*temp coeff_19(0-(1/121645100408832000))
*goto taylor

*label cos
*params x
*temp coeff_0(1/1)
*temp coeff_1 0
*temp coeff_2(0-(1/2))
*temp coeff_3 0
*temp coeff_4(1/24)
*temp coeff_5 0
*temp coeff_6(0-(1/720))
*temp coeff_7 0
*temp coeff_8(1/40320)
*temp coeff_9 0
*temp coeff_10(0-(1/3628800))
*temp coeff_11 0
*temp coeff_12(1/479001600)
*temp coeff_13 0
*temp coeff_14(0-(1/87178291200))
*temp coeff_15 0
*temp coeff_16(1/20922789888000)
*temp coeff_17 0
*temp coeff_18(0-(1/6402373705728000))
*temp coeff_19 0
*goto taylor

*label sinh
*params x
*temp coeff_0 0
*temp coeff_1(1/1)
*temp coeff_2 0
*temp coeff_3(1/6)
*temp coeff_4 0
*temp coeff_5(1/120)
*temp coeff_6 0
*temp coeff_7(1/5040)
*temp coeff_8 0
*temp coeff_9(1/362880)
*temp coeff_10 0
*temp coeff_11(1/39916800)
*temp coeff_12 0
*temp coeff_13(1/6227020800)
*temp coeff_14 0
*temp coeff_15(1/1307674368000)
*temp coeff_16 0
*temp coeff_17(1/355687428096000)
*temp coeff_18 0
*temp coeff_19(1/121645100408832000)
*goto taylor

*label cosh
*params x
*temp coeff_0(1/1)
*temp coeff_1 0
*temp coeff_2(1/2)
*temp coeff_3 0
*temp coeff_4(1/24)
*temp coeff_5 0
*temp coeff_6(1/720)
*temp coeff_7 0
*temp coeff_8(1/40320)
*temp coeff_9 0
*temp coeff_10(1/3628800)
*temp coeff_11 0
*temp coeff_12(1/479001600)
*temp coeff_13 0
*temp coeff_14(1/87178291200)
*temp coeff_15 0
*temp coeff_16(1/20922789888000)
*temp coeff_17 0
*temp coeff_18(1/6402373705728000)
*temp coeff_19 0

*label taylor
*temp idx 0
*temp x_acc 1
*set cslib_ret 0

*label taylor_loop
*if (idx > 19)
    *return
    
*set cslib_ret +(coeff[idx] * x_acc)
*set x_acc *x

${cslib_ret}  ${x_acc} ${x}

*set idx +1
*goto taylor_loop
