*comment IS_NUMBER
*comment ------------------------------
*comment Determines if a given string is a number.
*comment ------------------------------
*comment 	params:
*comment		p_string(string): the value to test
*comment	returns: 
*comment		(boolean) true if p_string is a number, else false
*label is_number
*params p_string
*temp input_len length(p_string)
*temp n 1
*temp result true
*label is_number_loop
*if (n <= input_len)
	*gosub_scene cslib_number _char_is_number (p_string#n)
	*if not(cslib_ret)
		*set result false
		*goto is_number_end
	*set n + 1
	*goto is_number_loop
*label is_number_end
*set cslib_ret result
*return


*comment ARE_NUMBERS
*comment ------------------------------
*comment Determines if any number of given parameters are ALL numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(any): a value to test
*comment	returns: 
*comment		(boolean): true if ALL values passed were numbers, else false
*label are_numbers
*params
*temp n 1
*temp result true
*label are_numbers_loop
*if (n <= param_count)
	*gosub_scene cslib_number is_number param[n]
	*if not(cslib_ret)
		*set result false
		*goto are_numbers_end
	*set n + 1
	*goto are_numbers_loop
*label are_numbers_end
*set cslib_ret result
*return


*comment MEAN
*comment ------------------------------
*comment Returns the mean (average) of the given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number to include in the calculation
*comment	returns: 
*comment		(number): the mean of the given numbers
*label mean
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*label mean_loop_top
*temp sum 0
*temp n 1
*label mean_loop
*if (n <= param_count)
	*set sum + param[n]
	*set n + 1
	*goto mean_loop
*set cslib_ret (sum / param_count)
*return


*comment MAX
*comment ------------------------------
*comment Returns the largest of a set of given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number
*comment	returns: 
*comment		(number): the largest number
*label max
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label max_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if (param[n] > current)
	*set current param[n]
*set n + 1
*goto max_loop


*comment MIN
*comment ------------------------------
*comment Returns the smallest of a set of given numbers.
*comment ------------------------------
*comment 	params:
*comment		param_n(number): a number
*comment	returns: 
*comment		(number): the smallest number
*label min
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label min_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if (param[n] < current)
	*set current param[n]
*set n + 1
*goto min_loop


*comment MAX_STAT
*comment ------------------------------
*comment Returns the largest of a set of given stats.
*comment ------------------------------
*comment 	params:
*comment		param_n(string): a stat (passed by name)
*comment	returns: 
*comment		(string): the stat with the largest value
*label max_stat
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label max_stat_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if ({param[n]} > {current})
	*set current param[n]
*set n + 1
*goto max_stat_loop


*comment MIN_STAT
*comment ------------------------------
*comment Returns the smallest of a set of given stats.
*comment ------------------------------
*comment 	params:
*comment		param_n(string): a stat (passed by name)
*comment	returns: 
*comment		(string): the stat with the smallest value
*label min_stat
*params
*gosub_scene cslib_assert greater_or_equal_to param_count 2
*temp current param[1]
*temp n 2
*label min_stat_loop
*if (n > param_count)
	*set cslib_ret current
	*return
*if ({param[n]} < {current})
	*set current param[n]
*set n + 1
*goto min_stat_loop


*label _char_is_number
*params p_char
*if (length(p_char) != 1)
	*bug TODO
*temp nums "0123456789"
*temp n 1
*temp result false
*label char_is_number_loop
*if (n <= 10)
	*if p_char = (nums#n)
		*set result true
		*goto char_is_number_end
	*set n + 1
	*goto char_is_number_loop
*label char_is_number_end
*set cslib_ret result
*return