*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0


*comment :::::: CONCAT tests ::::::
*gosub test_start "concat 1"
*temp result_expected "Real John Doe"
*gosub_scene cslib_string concat " " "Real" "John" "Doe"
*gosub test_finish result_expected cslib_ret

*gosub test_start "concat 2"
*temp result_expected "full_name"
*gosub_scene cslib_string concat "_" "full" "name"
*gosub test_finish result_expected cslib_ret


*comment :::::: SUBSTRING tests ::::::
*gosub test_start "SUBSTRING #1"
*temp result_expected "super"
*gosub_scene cslib_string substring "superman" 1 5
*gosub test_finish result_expected cslib_ret

*gosub test_start "SUBSTRING #2"
*temp result_expected "_"
*gosub_scene cslib_string substring "hello_world" 6 6
*gosub test_finish result_expected cslib_ret

*gosub test_start "SUBSTRING #3 (one char string)"
*temp result_expected "E"
*gosub_scene cslib_string substring "E" 1 1
*gosub test_finish result_expected cslib_ret


*comment :::::: FIND tests ::::::
*gosub test_start "FIND #1"
*temp result_expected 7
*gosub_scene cslib_string find "Hello World!" "World"
*gosub test_finish result_expected cslib_ret


*comment :::::: REPLACE tests ::::::
*gosub test_start "REPLACE #1"
*temp result_expected "abc_abc_abc_abc_abc"
*gosub_scene cslib_string replace "abc_bca_abc_bca_abc" "bca" "abc"
*gosub test_finish result_expected cslib_ret

*gosub test_start "REPLACE #2"
*temp result_expected "LE SP3AK 15 BAD"
*gosub_scene cslib_string replace "L337 SP34K 15 B4D" "337" "E"
*gosub_scene cslib_string replace cslib_ret "4" "A"
*gosub_scene cslib_string replace cslib_ret "7" "T"
*gosub test_finish result_expected cslib_ret

*gosub test_start "REPLACE #3 (sequential)"
*temp result_expected "LEET SPEAK 1S BAD"
*gosub_scene cslib_string replace "L337 SP34K 15 B4D" "3" "E"
*gosub_scene cslib_string replace cslib_ret "4" "A"
*gosub_scene cslib_string replace cslib_ret "7" "T"
*gosub_scene cslib_string replace cslib_ret "5" "S"
*gosub test_finish result_expected cslib_ret


*comment :::::: INDEX tests ::::::
*gosub test_start "INDEX #1"
*temp result_expected 3
*gosub_scene cslib_string index "ABCDEF" "C"
*gosub test_finish result_expected cslib_ret

*gosub test_start "INDEX #2"
*set cslib_catch_bug true
*temp result_expected "Bug: p_char should be a single character, not \"\""
*gosub_scene cslib_string index "ABCDEF" ""
*set cslib_catch_bug false
*gosub test_finish result_expected cslib_bug_message


*comment :::::: LOWERCASE tests ::::::
*gosub test_start "LOWERCASE #1"
*temp result_expected "lowercase"
*gosub_scene cslib_string lowercase "LOWERCASE"
*gosub test_finish result_expected cslib_ret

*gosub test_start "LOWERCASE #2 (spaces)"
*temp result_expected "lowercase with spaces"
*gosub_scene cslib_string lowercase "LOWERCASE with SPACES"
*gosub test_finish result_expected cslib_ret


*comment :::::: REVERSE tests ::::::
*gosub test_start "REVERSE #1"
*temp result_expected "!dlroW olleH"
*gosub_scene cslib_string reverse "Hello World!"
*gosub test_finish result_expected cslib_ret


*comment :::::: CONTAINS tests ::::::
*gosub test_start "CONTAINS #1 (numbers)"
*temp result_expected true
*gosub_scene cslib_string contains "My n4m3 is" "123456789"
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONTAINS #2 (spaces)"
*temp result_expected true
*gosub_scene cslib_string contains "Shouldn't have spaces" " "
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONTAINS #3 (neg)"
*temp result_expected false
*gosub_scene cslib_string contains "Hello World!" "2345txy"
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONTAINS #4 (single)"
*temp result_expected true
*gosub_scene cslib_string contains "!" "@!$%^"
*gosub test_finish result_expected cslib_ret


*comment :::::: CONSISTS_OF tests ::::::
*gosub test_start "CONSISTS_OF #1 (numbers)"
*gosub_scene cslib_string consists_of "14756598573756237350" "0123456789"
*temp result_expected true
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONSISTS_OF #2 (spaces)"
*gosub_scene cslib_string consists_of "       " " "
*temp result_expected true
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONSISTS_OF #3 (neg)"
*gosub_scene cslib_string consists_of "       cslib" " "
*temp result_expected false
*gosub test_finish result_expected cslib_ret

*gosub test_start "CONSISTS_OF #1 (single)"
*gosub_scene cslib_string consists_of "!" "@!$%^"
*temp result_expected true
*gosub test_finish result_expected cslib_ret


*comment :::::: EXTRACT TOKENS tests ::::::
*comment Extract 3 tokens into an array of 5.
*gosub test_start "EXTRACT_TOKENS #1"
*set str_buffer "VAL=TRUE|VAL=FALSE|VAL=TRUE"
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*gosub test_assert_equal 3 cslib_ret
*gosub test_assert_equal "VAL=TRUE" tokens_1
*gosub test_assert_equal "VAL=FALSE" tokens_2
*gosub test_assert_equal "VAL=TRUE" tokens_3
*comment The rest of the array is still empty.
*gosub test_assert_equal "" tokens_4
*gosub test_assert_equal "" tokens_5
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 3 tokens_count

*comment Extract 2 tokens into an array of 5. Remaining entries are undefined.
*gosub test_start "EXTRACT_TOKENS #2"
*set str_buffer "VAL=HERE|VAL=THERE"
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*gosub test_assert_equal 2 cslib_ret
*gosub test_assert_equal "VAL=HERE" tokens_1
*gosub test_assert_equal "VAL=THERE" tokens_2
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 2 tokens_count

*comment Extract 6 tokens into an array of 5 (only 5 are copied).
*gosub test_start "EXTRACT_TOKENS #3"
*set str_buffer "A|B|C|D|E|F"
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*comment There are actually 6 values, but only 5 are used.
*comment The user may check for this condition.
*gosub test_assert_equal 6 cslib_ret
*gosub test_assert_equal "A" tokens_1
*gosub test_assert_equal "B" tokens_2
*gosub test_assert_equal "C" tokens_3
*gosub test_assert_equal "D" tokens_4
*gosub test_assert_equal "E" tokens_5
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 5 tokens_count

*comment Empty source. The array is not manipulated.
*gosub test_start "EXTRACT_TOKENS #4"
*set str_buffer ""
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*gosub test_assert_equal 0 cslib_ret
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 0 tokens_count

*comment Only one token.
*gosub test_start "EXTRACT_TOKENS #5"
*set str_buffer "HI"
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*gosub test_assert_equal 1 cslib_ret
*gosub test_assert_equal "HI" tokens_1
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 1 tokens_count

*comment Empty tokens.
*gosub test_start "EXTRACT_TOKENS #6"
*set str_buffer "|A||C|"
*gosub_scene cslib_string extract_tokens str_buffer "|" "tokens"
*gosub test_assert_equal 5 cslib_ret
*gosub test_assert_equal "" tokens_1
*gosub test_assert_equal "A" tokens_2
*gosub test_assert_equal "" tokens_3
*gosub test_assert_equal "C" tokens_4
*gosub test_assert_equal "" tokens_5
*gosub test_assert_equal 5 tokens_max
*gosub test_finish 4 tokens_count

*comment Missing separator.
*gosub test_start "EXTRACT TOKENS #7"
*temp result_expected "Bug: cslib_string.extract_tokens: Separator should not be empty in extract_tokens."
*set str_buffer "|A||C|"

*set cslib_catch_bug true
*gosub_scene cslib_string extract_tokens str_buffer "" "tokens"
*set cslib_catch_bug false
*gosub test_finish cslib_bug_message result_expected

*comment Multiple separators.
*gosub test_start "EXTRACT TOKENS #8"
*temp result_expected "Bug: cslib_string.extract_tokens: Separator should be a single char in extract_tokens, not: '|-()'."
*set str_buffer "|A||C|"

*set cslib_catch_bug true
*gosub_scene cslib_string extract_tokens str_buffer "|-()" "tokens"
*set cslib_catch_bug false
*gosub test_finish cslib_bug_message result_expected

*set cslib_ret "${tests_passed}|${test_count}"
*return

*comment :::::: UTILITY routines ::::::
*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert_equal
*params p_result_expected p_result_actual
*gosub test_assert (p_result_expected = p_result_actual) "=> Expected - ${p_result_expected}[n/]=> Received - ${p_result_actual}[n/]"
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return

*label test_finish
*params
*if (param_count = 2)
	*gosub test_assert_equal param_1 param_2
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return