*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0


*comment :::::: REPEAT tests ::::::
*gosub test_start "REPEAT"
*set str_buffer ""
*temp result_expected "1[n/]"
*set result_expected &"2[n/]"
*set result_expected &"Fizz[n/]"
*set result_expected &"4[n/]"
*set result_expected &"Buzz[n/]"
*set result_expected &"Fizz[n/]"
*set result_expected &"7[n/]"
*set result_expected &"8[n/]"
*set result_expected &"Fizz[n/]"
*set result_expected &"Buzz[n/]"
*set result_expected &"11[n/]"
*set result_expected &"Fizz[n/]"
*set result_expected &"13[n/]"
*set result_expected &"14[n/]"
*set result_expected &"FizzBuzz[n/]"

*gosub_scene cslib_util repeat "test_util" "fizzbuzz" 15
*gosub test_finish result_expected str_buffer

*set cslib_ret "${tests_passed}|${test_count}"
*return

*label fizzbuzz
*params n
*temp str ""
*if ((n modulo 3) = 0)
	*set str &"Fizz"
*if ((n modulo 5) = 0)
	*set str &"Buzz"
*if (str = "")
	*set str &n
*set str &"[n/]"
*set str_buffer &str
*return

*comment :::::: UTILITY routines ::::::
*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert_equal
*params p_result_expected p_result_actual
*gosub test_assert (p_result_expected = p_result_actual) "=> Expected - ${p_result_expected}[n/]=> Received - ${p_result_actual}[n/]"
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return

*label test_finish
*params
*if (param_count = 2)
	*gosub test_assert_equal param_1 param_2
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return