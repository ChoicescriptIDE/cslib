*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0

*gosub test_start "get unmodified data"
*gosub_scene cslib_object get "testobj" 1
*gosub test_assert (testobj_testfield1 = "Calvin") "=> Expected - Calvin[n/]=> Received - ${testobj_testfield1}[n/]"
*gosub test_finish

*gosub test_start "set (modify) data"
*gosub_scene cslib_object set "testobj" 2 "testfield1" "Locke"
*gosub test_assert (testobj_2_testfield1 = "Locke") "=> Expected - Locke[n/]=> Received - ${testobj_2_testfield1}[n/]"
*gosub test_finish

*gosub test_start "get modified data"
*gosub_scene cslib_object get "testobj" 2
*gosub test_assert (testobj_testfield1 = "Locke") "=> Expected - Locke[n/]=> Received - ${testobj_testfield1}[n/]"
*gosub test_finish

*set cslib_ret "${tests_passed}|${test_count}"
*return

*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return


*label test_finish
*params
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return

