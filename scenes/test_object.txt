*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0

*comment test data (see startup.txt)
*comment dragon_field_1 "name"
*comment dragon_field_2 "hit_points"
*comment dragon_field_max 2
*comment dragon_name ""
*comment dragon_hit_points ""
*comment dragon_1_name "Calvin"
*comment dragon_1_hit_points 100
*comment dragon_2_name "Hobbes"
*comment dragon_2_hit_points 150


*gosub test_start "get unmodified data"
*gosub_scene cslib_object get "dragon" 1
*gosub test_assert (dragon_name = dragon_1_name) "=> Expected - ${dragon_1_name}[n/]=> Received - ${dragon_name}[n/]"
*gosub test_finish

*gosub test_start "set (modify) and get (modified) data"
*gosub_scene cslib_object set "dragon" 2 "name" "Locke"
*gosub_scene cslib_object get "dragon" 2
*gosub test_assert (dragon_2_name = "Locke") "=> Expected - Locke[n/]=> Received - ${dragon_2_name}[n/]"
*gosub test_assert (dragon_name = dragon_2_name) "=> Expected - Locke[n/]=> Received - ${dragon_name}[n/]"
*gosub test_finish

*set cslib_ret "${tests_passed}|${test_count}"
*return

*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return


*label test_finish
*params
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return

