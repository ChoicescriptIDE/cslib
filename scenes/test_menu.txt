*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0

*comment Override choice UI with an automated system:
*comment - cslib_choice_select: A list of of options to select sequentially
*comment - cslib_choice_count: The number of 'visible' options at the end of the sequence
*comment - cslib_choice_n: The 'visible' options at the end of the sequence
*comment - cslib_ret: The last 'selected' option at the end of the sequence
*set cslib_catch_choice true

*comment :::::: SIMPLE tests ::::::
*gosub test_start "simple - single item"
*set cslib_choice_select "1"
*gosub_scene cslib_menu build_simple "Hello"
*gosub test_assert_equal 1 cslib_choice_count
*gosub test_assert_equal 1 cslib_ret
*gosub test_assert_equal "Hello" cslib_choice_1
*gosub test_finish

*gosub test_start "page-count invalid"
*temp result_expected "Bug: cslib_menu._render_choice: this option should not be selectable"
*set cslib_choice_select "1"
*set cslib_catch_bug true
*gosub_scene cslib_menu build_simple 1 2 3 4 5 6
*set cslib_catch_bug false
*gosub test_finish result_expected cslib_bug_message

*gosub test_start "simple - two items (with cancel)"
*set cslib_choice_select "3"
*gosub_scene cslib_menu build_simple_with_cancel "Hello" "Goodbye"
*gosub test_assert_equal 3 cslib_choice_count
*gosub test_assert_equal 0 cslib_ret
*gosub test_assert_equal "Hello" cslib_choice_1
*gosub test_assert_equal "Goodbye" cslib_choice_2
*gosub test_assert_equal "[return]" cslib_choice_3
*gosub test_finish

*gosub test_start "simple - single-page (page 1, option 1)"
*set cslib_choice_select "3"
*gosub_scene cslib_menu build_simple 1 2 3 4 5 6 7 8 9 10 11
*gosub test_assert_equal 7 cslib_choice_count
*gosub test_assert_equal 1 cslib_ret
*gosub test_assert_equal "Page (1 / 3)" cslib_choice_1
*gosub test_assert_equal "[i]Next -->[/i]" cslib_choice_2
*gosub test_assert_equal "1" cslib_choice_3
*gosub test_assert_equal "2" cslib_choice_4
*gosub test_assert_equal "3" cslib_choice_5
*gosub test_assert_equal "4" cslib_choice_6
*gosub test_assert_equal "5" cslib_choice_7
*gosub test_finish

*gosub test_start "simple - multi-page (navigation)"
*comment Select 'Next' then 'Next' then 'Previous', then '8' on Page 2
*set cslib_choice_select "2,2,2,5"
*gosub_scene cslib_menu build_simple 1 2 3 4 5 6 7 8 9 10 11
*gosub test_assert_equal 8 cslib_choice_count
*gosub test_assert_equal 8 cslib_ret
*gosub test_assert_equal "Page (2 / 3)" cslib_choice_1
*comment due to 'smart' navigation, previous will be at the top
*gosub test_assert_equal "[i]<-- Previous[/i]" cslib_choice_2
*gosub test_assert_equal "6" cslib_choice_3
*gosub test_assert_equal "7" cslib_choice_4
*gosub test_assert_equal "8" cslib_choice_5
*gosub test_assert_equal "9" cslib_choice_6
*gosub test_assert_equal "10" cslib_choice_7
*gosub test_assert_equal "[i]Next -->[/i]" cslib_choice_8
*gosub test_finish

*gosub test_start "simple - multi-page (page 3, option 1)"
*set cslib_choice_select "2,2,3"
*gosub_scene cslib_menu build_simple 1 2 3 4 5 6 7 8 9 10 11
*gosub test_assert_equal 3 cslib_choice_count
*gosub test_assert_equal 11 cslib_ret
*gosub test_assert_equal "Page (3 / 3)" cslib_choice_1
*gosub test_assert_equal "[i]<-- Previous[/i]" cslib_choice_2
*gosub test_assert_equal "11" cslib_choice_3
*gosub test_finish


*comment :::::: ARRAY tests ::::::
*comment array - init test data
*set test_menu_opt_count 7
*set test_menu_opt_1 "Odd"
*set test_menu_opt_2 "Even"
*set test_menu_opt_3 "Odd"
*set test_menu_opt_4 "Even"
*set test_menu_opt_5 "Odd"
*set test_menu_opt_6 "Even"
*set test_menu_opt_7 "Odd"

*gosub test_start "array - multi-page (with return, page 1, selecting '4')"
*set cslib_choice_select "6"
*gosub_scene cslib_menu build_array "const_num" true
*gosub test_assert_equal 8 cslib_choice_count
*gosub test_assert_equal 4 cslib_ret
*gosub test_assert_equal "Page (1 / 2)" cslib_choice_1
*gosub test_assert_equal "[i]Next -->[/i]" cslib_choice_2
*gosub test_assert_equal "1" cslib_choice_3
*gosub test_assert_equal "2" cslib_choice_4
*gosub test_assert_equal "3" cslib_choice_5
*gosub test_assert_equal "4" cslib_choice_6
*gosub test_assert_equal "5" cslib_choice_7
*gosub test_assert_equal "[return]" cslib_choice_8
*gosub test_finish

*gosub test_start "array - multi-page (with return, page 2, selecting 'return')"
*set cslib_choice_select "2,7"
*gosub_scene cslib_menu build_array "const_num" true
*gosub test_assert_equal 7 cslib_choice_count
*gosub test_assert_equal 0 cslib_ret
*gosub test_assert_equal "Page (2 / 2)" cslib_choice_1
*gosub test_assert_equal "[i]<-- Previous[/i]" cslib_choice_2
*gosub test_assert_equal "6" cslib_choice_3
*gosub test_assert_equal "7" cslib_choice_4
*gosub test_assert_equal "8" cslib_choice_5
*gosub test_assert_equal "9" cslib_choice_6
*gosub test_assert_equal "[return]" cslib_choice_7
*gosub test_finish

*gosub test_start "array - filter"
*set cslib_choice_select "2,2,3"
*set test_arr_1 "Badger"
*set test_arr_2 ""
*set test_arr_3 "Dog"
*set test_arr_4 ""
*set test_arr_5 "Cat"
*set test_arr_6 "Fish"
*set test_arr_7 "Monkey"
*set test_arr_8 ""
*set test_arr_9 "Toad"
*set test_arr_count 9
*gosub_scene cslib_array filter_by_routine "test_arr" "test_menu_opt" "test_menu" "_filter_is_not_empty"

*goto _skip_filter_is_not_empty
*label _filter_is_not_empty
*params value index
*set cslib_ret true
*if (value = "")
	*set cslib_ret false
*return

*label _skip_filter_is_not_empty
*gosub_scene cslib_menu build_array "test_menu_opt" false
*gosub test_assert_equal 7 cslib_choice_count
*gosub test_assert_equal 1 cslib_ret
*gosub test_assert_equal "Page (1 / 2)" cslib_choice_1
*gosub test_assert_equal "[i]Next -->[/i]" cslib_choice_2
*gosub test_assert_equal "Badger" cslib_choice_3
*gosub test_assert_equal "Dog" cslib_choice_4
*gosub test_assert_equal "Cat" cslib_choice_5
*gosub test_assert_equal "Fish" cslib_choice_6
*gosub test_assert_equal "Monkey" cslib_choice_7
*gosub test_finish

*comment re-enable UI driven choices
*set cslib_catch_choice false

*comment :::::: END of tests ::::::
*set cslib_ret "${tests_passed}|${test_count}"
*return

*comment :::::: UTILITY routines ::::::
*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert_equal
*params p_result_expected p_result_actual
*gosub test_assert (p_result_expected = p_result_actual) "=> Expected - ${p_result_expected}[n/]=> Received - ${p_result_actual}[n/]"
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return

*label test_finish
*params
*if (param_count = 2)
	*gosub test_assert_equal param_1 param_2
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return