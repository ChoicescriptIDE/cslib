*title ChoiceScript Library (cslib)
*author CSIDE

*comment CSLIB requires implicit control flow
*create implicit_control_flow true

*comment Set to FALSE for manual test selection
*create automatic_testing true

*comment CSLIB_VARS / CONFIGURATION
*comment ----------------------------------
*create cslib_ret 0

*comment MODULE TEST REGISTRATION
*create module_0 ""
*create_array module 8 "test_framework" "string" "number" "util" "menu" "array" "math" "object"
*create_array module_log 8 ""

*comment GLOBAL TEST VARIABLES
*create total_tests_run 0
*create total_tests_passed 0

*comment ARRAY TEST DATA
*create test_menu_opt_max 9
*create_array test_menu_opt 9 ""

*comment GLOBAL VALUES
*create const_num_max 9
*create_array const_num 9 1 2 3 4 5 6 7 8 9

*create test_arr_max 9
*create_array test_arr 9 ""

*create str_buffer ""

*create cslib_catch_bug false
*create cslib_catch_choice false
*create cslib_choice_select 0

*comment SOME STATS FOR MIN/MAX
*create test_stat_strength 0
*create test_stat_charisma 0
*create test_stat_wisdom 0

*comment TEST DATA for OBJECTS
*create dragon_id ""
*create dragon_field_1 "name"
*create dragon_field_2 "hit_points"
*create dragon_field_max 2
*create dragon_name ""
*create dragon_hit_points ""
*create dragon_1_name "Calvin"
*create dragon_1_hit_points 100
*create dragon_2_name "Hobbes"
*create dragon_2_hit_points 150
*create dragon_3_name "Stebbing"
*create dragon_3_hit_points 100
*create dragon_count 3

*comment ARRAY USED AS RESULT FROM TOKENIZATION
*create_array tokens 5 ""
*comment The max number of entries (storage size).
*create tokens_max 5
*comment The number of valid entries.
*set tokens_count 0

*set implicit_control_flow true

*comment CHOICESCRIPT OVERRIDES â€” These are minified from original sources in mygame.js (please update both with any changes)
*comment override 'bug' to make it catchable for tests
*script Scene.prototype.bug=function(s){if(s=s?"Bug: "+this.replaceVariables(s):"Bug",!this.stats.cslib_catch_bug)throw new Error(this.lineMsg()+s);this.stats.cslib_bug_message=s,this.return()};
*comment override 'renderOptions' so we can control and test choices programatically
*script Scene.prototype.renderOptions=function(t,s,e){for(var i=0;i<s.length;i++)s[i].name=this.replaceVariables(s[i].name);if(this.stats.cslib_catch_choice){if(0===this.stats.cslib_choice_select.length)throw new Error("Error: stuck in a choice menu but selections (cslib_choice_select) were exhausted.");var c=this.stats.cslib_choice_select.split(","),h=parseInt(c.shift());this.stats.cslib_choice_select=c.join(","),this.stats.cslib_choice_count=s.length;for(i=0;i<s.length;i++)this.stats["cslib_choice_"+(i+1).toString()]=s[i].name;this.standardResolution(s[h-1])}else this.paragraph(),printOptions(t,s,e),this.debugMode&&println(toJson(this.stats)),this.finished&&printFooter()};
*if choice_randomtest
	*comment override randomtest's Scene.prototype.choice so we can use randomtest to perform automated testing
	*script Scene.prototype.choice=function(i){var t=["choice"];i&&(t=i.split(/ /));var n=this.parseOptions(this.indent,t),e=this;timeout=function(){println(""),e.renderOptions(t,n,function(i){e.standardResolution(i)})},this.finished=!0};

*if (automatic_testing)
	*comment automatic 'test all' for CI, quicktest etc.
	*gosub_scene _test_entry test_all_modules
	*if (total_tests_passed < total_tests_run)
		*comment print all module logs
		*gosub_scene cslib_array for_each "module" "_test_display_templates" "display_log"
		*comment force everything to print before we fail
		*page_break
		*comment force quicktest + randomtest to fail
		*bug ${total_tests_passed}/${total_tests_run} tests passed (${total_tests_run - total_tests_passed} failed)
	*else
		All tests passed.
*else
	*comment allow user to select individual tests, view logs etc.
	*goto_scene _test_entry main
