*title ChoiceScript Library (cslib)
*author CSIDE

*comment Set to FALSE for manual test selection
*create automatic_testing true

*comment CSLIB_VARS / CONFIGURATION
*comment ----------------------------------
*create cslib_ret 0
*comment captures ...
*create cslib_assert true

*comment MODULE TEST REGISTRATION
*create module_count 4
*create module_0 ""
*create module_log_0 ""
*create module_1 "string"
*create module_log_1 ""
*create module_2 "number"
*create module_log_2 ""
*create module_3 "assert"
*create module_log_3 ""
*create module_4 "loop"
*create module_log_4 ""

*comment GLOBAL TEST VARIABLES
*create total_tests_run 0
*create total_tests_passed 0

*comment GLOBAL VALUES
*create const_num_1 1
*create const_num_2 2
*create const_num_3 3
*create const_num_4 4
*create const_num_5 5
*create const_num_6 6
*create const_num_7 7
*create const_num_8 8
*create const_num_9 9

*create str_buffer ""

*create cslib_catch_bug false

*set implicit_control_flow true



*comment We modify Scene.prototype.bug to make *bug 'catchable'.
*comment If the stat cslib_catch_bug is set to true, in case of a bug a function
*comment will simply return. The error message will be available in cslib_bug_message.
*comment Make sure cslib_catch_bug is immediately reset to false.

*comment Example usage:

*comment    *set cslib_catch_bug true
*comment    *gosub_scene cslib_... ... ...
*comment    *set cslib_catch_bug false
*comment    *gosub test_finish "Expected message" cslib_bug_message

*comment The updated code:

*comment   Scene.prototype.bug = function scene_bug(message) {
*comment     if (message) {
*comment       message = "Bug: " + this.replaceVariables(message);
*comment     } else {
*comment       message = "Bug";
*comment     }
*comment     if (this.stats.cslib_catch_bug) {
*comment       this.stats.cslib_bug_message = message;
*comment       this.return();
*comment     } else {
*comment       throw new Error(this.lineMsg() + message);
*comment     }
*comment   }

*script Scene.prototype.bug = function scene_bug(message) {if (message) {message = "Bug: " + this.replaceVariables(message);} else {message = "Bug";} if (this.stats.cslib_catch_bug) {this.stats.cslib_bug_message = message;  this.return();} else {throw new Error(this.lineMsg() + message);}}

*if (automatic_testing)
	*comment automatic 'test all' for CI, quicktest etc.
	*gosub_scene _test_entry test_all_modules
	*if (total_tests_passed < total_tests_run)
		*comment print all module logs
		*gosub_scene cslib_loop repeat "_test_display_templates" "display_log" module_count
		*comment force quicktest + randomtest to fail
		*bug ${total_tests_passed}/${total_tests_run} tests passed (${total_tests_run - total_tests_passed} failed)
	*else
		All tests passed.
*else
	*comment allow user to select individual tests, view logs etc.
	*goto_scene _test_entry main