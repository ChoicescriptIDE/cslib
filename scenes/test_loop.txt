*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0


*comment :::::: ACC STR tests ::::::
*gosub test_start "ACC STR"
*temp result_expected "Pop[n/]Pop[n/]Fizz[n/]Pop[n/]Buzz[n/]Fizz[n/]Pop[n/]Pop[n/]Fizz[n/]Buzz[n/]Pop[n/]Fizz[n/]Pop[n/]Pop[n/]FizzBuzz"
*gosub_scene cslib_loop acc_str "test_loop" "acc_loop_fizzbuzz" 15
*gosub test_finish result_expected cslib_ret


*comment :::::: ACC NUM tests ::::::
*gosub test_start "ACC NUM"
*temp result_expected 256
*gosub_scene cslib_loop acc_num "test_loop" "acc_loop_square" 3 2
*gosub test_finish result_expected cslib_ret


*set cslib_ret "${tests_passed}|${test_count}"
*return

*label acc_loop_fizzbuzz
*params n acc count
*temp str ""
*if ((n modulo 3) = 0)
	*set str &"Fizz"
*if ((n modulo 5) = 0)
	*set str &"Buzz"
*if (str = "")
	*set str &"Pop"
*if (n != count)
	*set str &"[n/]"
*set cslib_ret acc&str
*return

*label acc_loop_square
*params n acc count
*set cslib_ret acc * acc
*return


*comment :::::: UTILITY routines ::::::
*label test_start
*params p_test_name
*temp test_result true
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_assert_equal
*params p_result_expected p_result_actual
*gosub test_assert (p_result_expected = p_result_actual) "=> Expected - ${p_result_expected}[n/]=> Received - ${p_result_actual}[n/]"
*return

*label test_assert
*params p_test_condition p_test_message
*if not(p_test_condition)
	*set test_result false
	*set {log_buffer} &("[n/]"&(p_test_message&"[n/]"))
*return

*label test_finish
*params
*if (param_count = 2)
	*gosub test_assert_equal param_1 param_2
*set {log_buffer} &"@{test_result PASS|FAIL}[n/]"
*if test_result
	*set tests_passed + 1
*return